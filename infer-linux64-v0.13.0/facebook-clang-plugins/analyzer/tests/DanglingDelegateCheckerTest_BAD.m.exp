tests/DanglingDelegateCheckerTest_BAD.m:24:1: warning: 'Child' lacks a 'dealloc' instance method but must release '_worker2' and others
@implementation Child
^
tests/DanglingDelegateCheckerTest_BAD.m:36:3: warning: Leaking unsafe reference to self stored in _worker1.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker1' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker1.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker1.delegate != self);' or, if applicable: 'FBAssert(!_worker1);'
  [_worker1 release];
  ^~~~~~~~~~~~~~~~~~
tests/DanglingDelegateCheckerTest_BAD.m:41:3: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
  [_worker2 autorelease];
  ^~~~~~~~~~~~~~~~~~~~~~
tests/DanglingDelegateCheckerTest_BAD.m:46:8: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
  self.worker2 = nil;
       ^~~~~~~
tests/DanglingDelegateCheckerTest_BAD.m:54:8: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
  self.worker2 = nil;
       ^~~~~~~
tests/DanglingDelegateCheckerTest_BAD.m:63:10: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
    self.worker2 = nil;
         ^~~~~~~
tests/DanglingDelegateCheckerTest_BAD.m:72:4: warning: Leaking unsafe reference to self stored in _worker1.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker1' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker1.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker1.delegate != self);' or, if applicable: 'FBAssert(!_worker1);'
   [_worker1 release];
   ^~~~~~~~~~~~~~~~~~
7 warnings generated.
