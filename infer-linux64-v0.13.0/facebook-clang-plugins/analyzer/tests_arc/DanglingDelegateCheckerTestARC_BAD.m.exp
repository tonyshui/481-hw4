tests_arc/DanglingDelegateCheckerTestARC_BAD.m:24:17: warning: Leaking unsafe reference to self stored in _worker1.delegate (in ARC-generated dealloc). The assign property 'delegate' of the instance of Worker stored in '_worker1' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker1.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker1.delegate != self);' or, if applicable: 'FBAssert(!_worker1);'
@implementation Child
                ^
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:24:17: warning: Leaking unsafe reference to self stored in _worker2.delegate (in ARC-generated dealloc). The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:24:17: warning: Leaking unsafe reference to self stored in _worker3.delegate (in ARC-generated dealloc). The assign property 'delegate' of the instance of Worker stored in '_worker3' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker3.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker3.delegate != self);' or, if applicable: 'FBAssert(!_worker3);'
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:36:12: warning: Leaking unsafe reference to self stored in _worker1.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker1' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker1.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker1.delegate != self);' or, if applicable: 'FBAssert(!_worker1);'
  _worker1 = nil;
  ~~~~~~~~~^~~~~
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:41:12: warning: Leaking unsafe reference to self stored in _worker3.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker3' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker3.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker3.delegate != self);' or, if applicable: 'FBAssert(!_worker3);'
  _worker3 = nil;
  ~~~~~~~~~^~~~~
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:46:8: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
  self.worker2 = nil;
       ^~~~~~~
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:54:12: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
  _worker2 = nil;
  ~~~~~~~~~^~~~~
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:63:14: warning: Leaking unsafe reference to self stored in _worker2.delegate. The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
    _worker2 = nil;
    ~~~~~~~~~^~~~~
tests_arc/DanglingDelegateCheckerTestARC_BAD.m:89:1: warning: Leaking unsafe reference to self stored in _worker2.delegate (in ARC-generated code). The assign property 'delegate' of the instance of Worker stored in '_worker2' appears to occasionally point to self. For memory safety, you need to clear this property explicitly before losing reference to this object, typically by adding a line: '_worker2.delegate = nil;'. In case of a false warning, consider adding an assert instead: 'FBAssert(_worker2.delegate != self);' or, if applicable: 'FBAssert(!_worker2);'
}
^
9 warnings generated.
